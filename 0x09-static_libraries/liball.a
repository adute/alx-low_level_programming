!<arch>
0-isupper.c/    0           0     0     644     35        `
int _isupper(int c)
{
	return c;
}

0-memset.c/     0           0     0     644     64        `
char *_memset(char *s, char b, unsigned int n)
{
	return (s);
}
0-strcat.c/     0           0     0     644     54        `
char *_strcat(char *dest, char *src)
{return(dest);
}
100-atoi.c/     0           0     0     644     35        `
int _atoi(char *s)
{
	return(0);
}

1-isdigit.c/    0           0     0     644     24        `
int _isdigit(int c)
{
}
1-memcpy.c/     0           0     0     644     72        `
char *_memcpy(char *dest, char *src, unsigned int n)
{
	return(dest);
}
1-strncat.c/    0           0     0     644     65        `
char *_strncat(char *dest, char *src, int n)
{
	return (dest);
}

2-strchr.c/     0           0     0     644     48        `
char *_strchr(char *s, char c)
{
	return (s);
}
2-strlen.c/     0           0     0     644     248       `
#include "main.h"

/**
 * _strlen - print length of the given string
 * @s: string whose length to be measured
 * Return: the length of string
 *
 */
int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		len++;
		s++;
	}

	return (len);
}
2-strncpy.c/    0           0     0     644     65        `
char *_strncpy(char *dest, char *src, int n)
{
	return (dest);
}

3-islower.c/    0           0     0     644     35        `
int _islower(int c)
{
	return c;
}

3-puts.c/       0           0     0     644     53        `
#include "main.h"
/**
 *
 */
void _puts(char *s)
{
}

3-strcmp.c/     0           0     0     644     0         `
3-strspn.c/     0           0     0     644     47        `
unsigned int _strspn(char *s, char *accept)
{}

4-isalpha.c/    0           0     0     644     36        `
int _isalpha(int c)
{
	return (c)
}
4-strpbrk.c/    0           0     0     644     54        `
char *_strpbrk(char *s, char *accept)
{
	return(s);
}
5-strstr.c/     0           0     0     644     48        `
char *_strstr(char *haystack, char *needle)
{
}
6-abs.c/        0           0     0     644     31        `
int _abs(int n)
{
	return n;
}

9-strcpy.c/     0           0     0     644     57        `
char *_strcpy(char *dest, char *src)
{
	return (dest);
}

_putchar.c/     0           0     0     644     45        `
int _putchar(char c)
{
	return( 1, &c, 1);
}

